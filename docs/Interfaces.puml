@startuml

skinparam linetype ortho

package baseinterfaces {
    interface Graph<Vertex> {
        + isDirected: Boolean

        + containsVertex(vertex: Vertex): Boolean
        + isAdjacent(from: Vertex, to: Vertex): Boolean
        + neighbors(vertex: Vertex): Set<Vertex>?
    }

    interface Mutable<Vertex, EdgeValue>{
        + addVertex(vertex: Vertex): Boolean
        + removeVertex(vertex: Vertex): Boolean
        + addEdge(from: Vertex, to: Vertex, value: EdgeValue?): Boolean
        + removeEdge(from: Vertex, to: Vertex): Boolean
    }

    interface Valued<Vertex, EdgeValue> {
        + getEdgeValue(from: Vertex, to: Vertex): EdgeValue?
        + putEdgeValue(from: Vertex, to: Vertex, value: EdgeValue)
        + removeEdgeValue(from: Vertex, to: Vertex): Boolean
    }
}

interface MutableGraph<Vertex>{
    + addEdge(from: Vertex, to: Vertex): Boolean
}
MutableGraph --> Graph
MutableGraph --> Mutable

interface ValuedGraph<Vertex, EdgeValue>
ValuedGraph --> Graph
ValuedGraph --> Valued

interface ValuedMutableGraph<Vertex, EdgeValue>{
    + addEdge(from: Vertex, to: Vertex, value: EdgeValue): Boolean
}
ValuedMutableGraph --> Graph
ValuedMutableGraph --> Mutable
ValuedMutableGraph --> Valued

@enduml